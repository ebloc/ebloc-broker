#+CAPTION: Weight space
#+ATTR_HTML: :alt neural network :title Neural network representation :align right
#+ATTR_HTML: :width 25% :height 25%
* [[https://github.com/ebloc/ebloc-broker/raw/dev/imgs/logo.png]] ebloc-broker
=eBlocBroker= is a smart contract as an autonomous volunteer computing and sharing data resource
broker based on blockchain for e-Science.  It applies blockchain technology to provide a market for
computational and data resources to research communities.

# ** Website: [[http://ebloc.cmpe.boun.edu.tr]] # http://ebloc.org

# For more info see: [[https://ebloc-broker-readthedocs.duckdns.org/][documentation]].

** Prerequisites
- [[https://github.com/SchedMD/slurm][Slurm]],
  [[https://ipfs.io][IPFS]],
  [[https://github.com/eth-brownie/brownie][eth-brownie]],
  [[https://github.com/owncloud/pyocclient][owncloud/pyocclient]],
  [[https://github.com/prasmussen/gdrive][prasmussen/gdrive]],
  [[https://github.com/trufflesuite/ganache][ganache-cli]].

** Using Docker

You can use a sandbox container provided in the [[./docker-compose.yml]] file for testing inside a Docker environment.

This container provides everything you need to test using a ~Python 3.7~ interpreter.
Start the test environment:
#+begin_src bash
docker-compose up -d
#+end_src

To enter the shell of the running container in the interactive mode, run:
#+begin_src
docker exec --detach-keys="ctrl-e,e" -it ebloc-broker_slurm_1 /bin/bash
#+end_src

To stop the container, run:
#+begin_src bash
docker-compose down
#+end_src

** Cloud Storages
*** B2DROP
**** Create B2ACCESS user account and login into B2DROP:

First, from [[https://b2access.eudat.eu/home/][B2ACCESS home page]]

~No account SignUp~ => ~Create B2ACCESS user account (username) only~

- [[https://b2drop.eudat.eu/][B2DROP login site]]

**** Create app password
=Settings= => ~Security~ => ~Create new app password~ and save it onto ~~/.ebloc-broker/.b2drop_client.txt~ file.

** How to install required packages

We have a helper script, which you can use to install all required external dependencies:

#+begin_src bash
source ./scripts/setup.sh
#+end_src

Next, type ~eblocbroker --help~ for basic usage information.

** Requester

*** Submit Job

In order to submit your job each user should already registered into eBlocBroker using ~eblocbroker register_provider ~/.ebloc-broker/cfg.yaml~
# You can use [[./broker/eblocbroker_scripts/register_requester.py]] to register.
# Please update following arguments inside ~register.yaml~.
After registration is done, each user should authenticate their ORCID iD using the following [[http://ebloc-broker-authenticate.duckdns.org/index.php]] using [[https://brave.com][Brave]] browser along with [[https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn][MetaMask]].

#+begin_src bash
$ eblocbroker submit job.yaml
#+end_src

**** Example yaml file in order to define a job to submit.

=job.yaml= :
#+begin_src yaml
config:
  requester_address: '0x378181ce7b07e8dd749c6f42772574441b20e35f'
  provider_address: '0x29e613b04125c16db3f3613563bfdd0ba24cb629'
  source_code:
    storage_id: ipfs
    cache_type: public
    path: ~/test_eblocbroker/run_cppr
    storage_hours: 0
  data:
    data1:
      hash: 4613abc322e8f2fdeae9a5dd10f17540
    data2:
      hash: 050e6cc8dd7e889bf7874689f1e1ead6
    data3:
      cache_type: public
      path: /home/alper/test_eblocbroker/small/BVZ-venus
      storage_hours: 1
      storage_id: ipfs
  data_transfer_out: 10
  jobs:
    job0:
      cores: 1
      run_time: 60
#+end_src

- ~path~ should represented as full path of the corresponding folder.
- ~cache_type~ should be variable from [ ~public~, ~private~ ]
- ~storage_id~ should be variable from [ ~ipfs~, ~ipfs_gpg~, ~none~, ~b2drop~, ~gdrive~ ]

-----------------------------------

** Provider
Each provider should run ~eblocbroker driver~ for start running the Python script.

#+HTML: <details><summary>Example screenshot of provider GUI:</summary>
[[file:/docs/gui1.png]]
#+HTML: </details>

** ðŸŽ¬ Demonstration

- [[https://asciinema.org/a/551809]]
- [[https://asciinema.org/a/551843]]


** Acknowledgement

This work is supported by the Turkish Directorate of Strategy and Budget under the TAM Project
number 2007K12-873.

Developed by Alper Alimoglu and Can Ozturan from Bogazici University, Istanbul.
Contact [[mailto:alper.alimoglu@boun.edu.tr][alper.alimoglu@boun.edu.tr]], [[mailto:ozturaca@boun.edu.tr][ozturaca@boun.edu.tr]] if necessary.
